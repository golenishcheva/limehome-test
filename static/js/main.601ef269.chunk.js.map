{"version":3,"sources":["components/header/Header.tsx","components/marker/Marker.tsx","components/card/Card.tsx","components/lane/Lane.tsx","components/map/Map.tsx","services/HttpService.tsx","components/home/Home.tsx","serviceWorker.ts","index.tsx"],"names":["Header","props","fixNav","bind","window","addEventListener","this","removeEventListener","header","document","querySelector","topOfNav","HTMLElement","offsetTop","scrollY","classList","add","remove","className","href","src","alt","React","Component","Marker","onClick","cb","id","isMarkerClicked","length","active","Card","key","hotel","title","distance","toFixed","Math","floor","random","vicinity","Lane","sliderRef","createRef","state","windowWidth","innerWidth","updateDimensions","setState","cards","cardNum","currentSlide","hotels","findIndex","settings","dots","infinite","slidesToShow","arrows","focusOnSelect","initialSlide","draggable","centerMode","centerPadding","swipe","current","slickGoTo","ref","map","Map","center","lat","lng","bounds","top","right","bottom","left","prevMarkerId","handleApiLoaded","setMapBounds","handleMarkerClick","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","maps","addListener","data","getBounds","getNorthEast","getSouthWest","fetch","method","headers","then","response","json","catch","err","console","log","res","deepClone","results","items","sort","prev","next","forEach","index","newState","bootstrapURLKeys","zoom","yesIWantToUseGoogleMapApiInternals","onGoogleApiLoaded","options","disableDefaultUI","text","Home","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.601ef269.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\n\r\nclass Header extends React.Component {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.fixNav = this.fixNav.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('scroll', this.fixNav);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('scroll', this.fixNav);\r\n    }\r\n\r\n    fixNav() {\r\n        const header = document.querySelector('.header');\r\n        let topOfNav:number = 0;\r\n        if (header instanceof HTMLElement) {topOfNav = header.offsetTop};\r\n\r\n        if (header && window.scrollY >= topOfNav) {\r\n            header.classList.add('fixed-header');\r\n        } else if (header) {\r\n            header.classList.remove('fixed-header');\r\n        }\r\n    }\r\n  render() {\r\n    return (\r\n        <header className='header'>\r\n            <nav className='header_nav'>\r\n                <ul className='header_menu'>\r\n                    <li className='header_menu-item'>\r\n                        <a href='#'>\r\n                            <img src='limehome_logo.svg' alt='Logo'/>\r\n                        </a>\r\n                    </li>\r\n                    <li className='header_menu-item'>\r\n                        <button>\r\n                            <img src='burger_icon.svg' alt='Menu button'/>\r\n                        </button>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n        </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport './Marker.css';\r\n\r\ninterface Props {\r\n  id: string,\r\n  isMarkerClicked: string,\r\n  active: boolean,\r\n  cb: Function\r\n  text: string,\r\n  lat: number,\r\n  lng: number\r\n};\r\n\r\nclass Marker extends React.Component <Props>{\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div onClick={() => this.props.cb(this.props.id)}>\r\n        <img className={this.props.isMarkerClicked.length > 0 && this.props.active ? 'active' : 'inactive'} src={this.props.active ? 'home_icon-active.svg': 'home_icon-default.svg'} alt='Marker'/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Marker;","import React from 'react';\r\nimport './Card.css';\r\n\r\ninterface Props {\r\n    hotel: {\r\n        id: string,\r\n        title: string,\r\n        distance: number,\r\n        vicinity: string,\r\n        active: boolean\r\n    };\r\n};\r\n\r\nclass Card extends React.Component <Props>{\r\n\r\n    render() {\r\n        return (\r\n            <div className='hotel_cards-item' key={this.props.hotel.id}>\r\n                <div className='hotel_card-content'>\r\n                    <div className='hotel_card-details'>\r\n                        <div className='hotel_card-details--photo'>\r\n                            <img src='https://via.placeholder.com/200x300' alt='Hotel'></img>\r\n                        </div>\r\n                        <div className='hotel_card-details--info'>\r\n                            <h3 className='info_title'> {this.props.hotel.title} </h3>\r\n                            <p className='info_distance'>{(this.props.hotel.distance/1000).toFixed(1)} km from the city center</p>\r\n                            <p className='info_price'>${Math.floor(Math.random() * 90 + 10)}</p>\r\n                            <p className='info_desc'>{this.props.hotel.vicinity}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className='hotel_card-control'>\r\n                        <button className='card_button'>Book</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport './Lane.css';\r\nimport Card from '../card/Card';\r\nimport SlickSlider from \"react-slick\";\r\n\r\ninterface Props {\r\n    hotels: Array<Hotel>;\r\n};\r\ninterface Hotel {\r\n    id: string,\r\n    title: string,\r\n    distance: number,\r\n    vicinity: string,\r\n    active: boolean\r\n}\r\n\r\ninterface State {\r\n    windowWidth: number;\r\n};\r\n\r\nclass Lane extends React.Component <Props, State> {\r\n    private sliderRef = React.createRef<any>();\r\n\r\n    constructor(props: any){\r\n        super(props);\r\n        this.state = {\r\n            windowWidth: window.innerWidth\r\n        };\r\n        this.updateDimensions = this.updateDimensions.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.addEventListener('resize', this.updateDimensions);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('resize', this.updateDimensions);\r\n    }\r\n\r\n    updateDimensions() {\r\n        this.setState({windowWidth: window.innerWidth})\r\n    }\r\n\r\n    render() {\r\n\r\n        const cardWidth = 280;\r\n        const cards = Math.floor((this.state.windowWidth - 100) / cardWidth);\r\n        const cardNum = cards < 1 ? 1 : cards;\r\n        const currentSlide = this.props.hotels.findIndex(hotel => hotel.active);\r\n        const settings = {\r\n            dots: false,\r\n            infinite: true,\r\n            slidesToShow: cardNum,\r\n            arrows: false,\r\n            focusOnSelect: false,\r\n            initialSlide: currentSlide,\r\n            draggable: false,\r\n            centerMode: true,\r\n            centerPadding: '15px',\r\n            swipe: false\r\n        };\r\n\r\n        if (this.sliderRef && this.sliderRef.current) this.sliderRef.current.slickGoTo(currentSlide);\r\n\r\n        return (\r\n            <div className='hotel_cards'>\r\n                <SlickSlider {...settings} ref={this.sliderRef}>\r\n                    {this.props.hotels.map((hotel) =>\r\n                        <Card key={hotel.id} hotel={hotel}/>\r\n                    )}\r\n                </SlickSlider>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Lane;","import React from 'react';\r\nimport './Map.css';\r\nimport GoogleMap from 'google-map-react';\r\nimport * as HttpService from '../../services/HttpService';\r\nimport Marker from '../marker/Marker';\r\nimport Lane from '../lane/Lane';\r\nimport deepClone from 'lodash.clonedeep';\r\n\r\ninterface State {\r\n    hotels: Array<Hotel>,\r\n    center: Center,\r\n    bounds: Bounds,\r\n    isMarkerClicked: string,\r\n    prevMarkerId: string\r\n}\r\ninterface Hotel {\r\n    distance: number,\r\n    title: string,\r\n    icon: string,\r\n    vicinity: string,\r\n    type: string,\r\n    href: string,\r\n    id: string,\r\n    position: Array<number>,\r\n    active: boolean\r\n}\r\ninterface Position {\r\n    coords: Coords\r\n}\r\ninterface Coords {\r\n    latitude: number,\r\n    longitude: number\r\n}\r\ninterface Center {\r\n    lat: number,\r\n    lng: number\r\n}\r\ninterface Bounds {\r\n    top: string,\r\n    right: string,\r\n    bottom: string,\r\n    left: string\r\n}\r\n\r\nclass Map extends React.Component <any, State, Position> {\r\n    constructor(props: any){\r\n        super(props);\r\n        this.state = {\r\n            center: {\r\n                lat: 52.520008,\r\n                lng: 13.404954\r\n            },\r\n            bounds: {\r\n                top:'',\r\n                right:'',\r\n                bottom: '',\r\n                left: ''\r\n            },\r\n            hotels: [],\r\n            isMarkerClicked: '',\r\n            prevMarkerId: ''\r\n        };\r\n        this.handleApiLoaded = this.handleApiLoaded.bind(this);\r\n        this.setMapBounds = this.setMapBounds.bind(this);\r\n        this.handleMarkerClick = this.handleMarkerClick.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        navigator.geolocation.getCurrentPosition(function(this: any, position: Position) {\r\n          this.setState({center: {lat: position.coords.latitude, lng: position.coords.longitude}})\r\n        }.bind(this));\r\n    }\r\n\r\n    handleApiLoaded(map: any, maps: any) {\r\n\r\n        this.setMapBounds(map);\r\n\r\n        map.addListener('bounds_changed', function(this: any) {\r\n            if (!this.state.isMarkerClicked) this.setMapBounds(map);\r\n        }.bind(this));\r\n\r\n        map.addListener('zoom_changed', function(this: any) {\r\n            if (!this.state.isMarkerClicked) this.setMapBounds(map);\r\n        }.bind(this));\r\n    }\r\n\r\n    setMapBounds(map: any) {\r\n\r\n        const top = map.getBounds().getNorthEast().lat();\r\n        const right = map.getBounds().getNorthEast().lng();\r\n        const bottom = map.getBounds().getSouthWest().lat();\r\n        const left = map.getBounds().getSouthWest().lng();\r\n\r\n        HttpService.getData(`${left},${bottom},${right},${top}`).then((res) => {\r\n            const hotels:Array<Hotel> = deepClone(res.results.items);\r\n\r\n                hotels\r\n                    .sort((prev, next) => prev.distance > next.distance ? 1 : -1)\r\n                    .forEach((hotel, index) => {\r\n                        (this.state.isMarkerClicked.length === 0 && index === 0) || (this.state.isMarkerClicked.length > 0 && this.state.isMarkerClicked === hotel.id) ? hotel.active = true : hotel.active = false\r\n                    });\r\n\r\n            this.setState({hotels: hotels});\r\n        });\r\n    }\r\n\r\n    handleMarkerClick(id:string) {\r\n        let isMarkerClicked = '';\r\n\r\n        if (!(this.state.prevMarkerId === id && this.state.isMarkerClicked.length > 0)) isMarkerClicked = id;\r\n\r\n        const newState = deepClone(this.state);\r\n\r\n        let hotels:Array<Hotel> = newState.hotels;\r\n\r\n        hotels.forEach((hotel) => hotel.id === id ? hotel.active = true : hotel.active = false);\r\n\r\n        this.setState({hotels: newState.hotels, prevMarkerId: id, isMarkerClicked: isMarkerClicked});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='map-holder'>\r\n                <div className='map'>\r\n                    <GoogleMap\r\n                        bootstrapURLKeys={{ key: 'AIzaSyByVaDzR_s27S-R1a_gyKvyqWBeU7IVe8Q' }}\r\n                        center={{ lat: this.state.center.lat, lng: this.state.center.lng }}\r\n                        zoom={14}\r\n                        yesIWantToUseGoogleMapApiInternals\r\n                        onGoogleApiLoaded={({ map, maps }) => this.handleApiLoaded(map, maps)}\r\n                        options={{\r\n                            disableDefaultUI: true\r\n                        }}\r\n                    >\r\n                        {this.state.hotels.map((hotel) => (\r\n                            <Marker\r\n                                key={hotel.id}\r\n                                text={hotel.title}\r\n                                lat={hotel.position[0]}\r\n                                lng={hotel.position[1]}\r\n                                cb={this.handleMarkerClick}\r\n                                id={hotel.id}\r\n                                active={hotel.active}\r\n                                isMarkerClicked={this.state.isMarkerClicked}\r\n                            />\r\n                        ))}\r\n                    </GoogleMap>\r\n                </div>\r\n              <Lane hotels={this.state.hotels} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Map;","\r\nexport function getData(data: any){\r\n    return fetch(`https://places.ls.hereapi.com/places/v1/discover/explore?apiKey=${'fBQybpHx6xku2N8C2TtV3lY0nGz0Ph2tmpwkTmnxwyM'}&in=${data}&cat=${'hotel'}`, {\r\n        method: 'GET',\r\n        headers: {\r\n            'Content-Type':'application/json'\r\n        }\r\n    })\r\n    .then((response) => response.json())\r\n    .catch((err) => console.log(err));\r\n}","import React from 'react';\r\nimport './Home.css';\r\nimport Header from '../header/Header';\r\nimport Map from '../map/Map';\r\n\r\nclass Home extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <Map />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Home from './components/home/Home';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Home />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}